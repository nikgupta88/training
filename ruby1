**>-Ruby Global Variables
$global_variable = 10
class Class1
   def print_global
      puts "Global variable in Class1 is #$global_variable"
   end
end
class Class2
   def print_global
      puts "Global variable in Class2 is #$global_variable"
   end
end

class1obj = Class1.new
class1obj.print_global
class2obj = Class2.new
class2obj.print_global
output
Global variable in Class1 is 10
Global variable in Class2 is 10

**>-Ruby Instance Variables
class Customer
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
end
# Create Objects
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

# Call Methods
cust1.display_details()
cust2.display_details()
output
Customer id 1
Customer name John
Customer address Wisdom Apartments, Ludhiya
Customer id 2
Customer name Poul
Customer address New Empire road, Khandala


**>-Ruby Class Variables
class Customer
   @@no_of_customers = 0
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
   def total_no_of_customers()
      @@no_of_customers += 1
      puts "Total number of customers: #@@no_of_customers"
   end
end

# Create Objects
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

# Call Methods
cust1.total_no_of_customers()
cust2.total_no_of_customers()

output
Total number of customers: 1
Total number of customers: 2


**>-Ruby Local Variables
class Example
   VAR1 = 100
   VAR2 = 200
   def show
      puts "Value of first Constant is #{VAR1}"
      puts "Value of second Constant is #{VAR2}"
   end
end

# Create Objects
object = Example.new()
object.show


**>-operations
a=10
b=20
puts "#{a + b}" 
output
30

puts "#{a - b}" 
output
-10

puts "#{a * b}" 
output
200

puts "#{a ** b}" 
output
10^20

puts "#{b / a}" 
output
2

puts "#{b % a}" 
output
0

puts "#{a == b}" 
output
false

puts "#{a != b}" 
output
true

puts "#{a < b}" 
output
true

puts "#{a > b}" 
output
false

puts "#{a >= b}" 
output
false

puts "#{a <= b}" 
output
true

puts "#{(1 .. 10===5)}" 
output
true


**>-assignment operation(=,+=,-=,*=,/=,%=,**=)

a=10
b=20
puts "#{a += b}" 
output
30

puts "#{a -= b}" 
output
-10

puts "#{a *= b}" 
output
200

puts "#{a %= b}" 
output
0



**>-Parallel assignment
a=10
b=20
puts "#{a , b=b , a}" 
output
[20, 10]


**>-Ruby Bitwise Operators

a=10
b=20
print (a|b).to_s(2)
output
11110


a=10
b=20
print (a&b).to_s(2)
output
11110


a=10
b=20
print (a^b).to_s(2)
output
11110

**>-comments
#aaaaaaa

=begin
aaaaaa
aaaaa\
aa
=end

**>-if else, elsif

x = 1
if x > 2
   puts "x is greater than 2"
elsif x <= 2 and x!=0
   puts "x is 1"
else
   puts "I can't guess the number"
end

output

x is 1

**>-unless
x = 1 
unless x>=2
   puts "x is less than 2"
 else
   puts "x is greater than 2"
end

**>-case Statement

$age =  5
case $age
when 0 .. 2
   puts "baby"
when 3 .. 6
   puts "little child"
when 7 .. 12
   puts "child"
when 13 .. 18
   puts "youth"
else
   puts "adult"
end

output
little child

**>-loop
while

$i = 0
$num = 5

while $i < $num  do
   puts("Inside the loop i = #$i" )
   $i +=1
end

output
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4

do-while

$i = 0
$num = 5
begin
   puts("Inside the loop i = #$i" )
   $i +=1
end while $i < $num

output
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4

untill

$i = 0
$num = 5

until $i > $num  do
   puts("Inside the loop i = #$i" )
   $i +=1;
end


Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
Inside the loop i = 5


for

for i in 0..5
   puts "Value of local variable is #{i}"
end
output
Value of local variable is 0
Value of local variable is 1
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5


break

for i in 0..5
   if i > 2 then
      break
   end
   puts "Value of local variable is #{i}"
end
output

Value of local variable is 0
Value of local variable is 1
Value of local variable is 2

next
for i in 0..5
   if i < 2 then
      next
   end
   puts "Value of local variable is #{i}"
end
output
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5

redo

for i in 0..5
   if i < 2 then
      puts "Value of local variable is #{i}"
      redo
   end
end
output

Value of local variable is 0
Value of local variable is 0
............................


**>-Ruby - Methods


def test(a1 = "Ruby", a2 = "Perl")
   puts "The programming language is #{a1}"
   puts "The programming language is #{a2}"
end
test "C", "C++"
test
output
The programming language is C
The programming language is C++
The programming language is Ruby
The programming language is Perl


def test
   i = 100
   j = 200
   k = 300
return i, j, k
end
var = test
puts var
output
100
200
300

**>-Ruby module Statement

module Week
   FIRST_DAY = "Sunday"
   def Week.weeks_in_month
      puts "You have four weeks in a month"
   end
   def Week.weeks_in_year
      puts "You have 52 weeks in a year"
   end
end


class Decade
include Week
   no_of_yrs = 10
   def no_of_months
      puts Week::FIRST_DAY
      number = 10*12
      puts number
   end
end
d1 = Decade.new
puts Week::FIRST_DAY
Week.weeks_in_month
Week.weeks_in_year
d1.no_of_months

output

Sunday
You have four weeks in a month
You have 52 weeks in a year
Sunday
120









